
# -*- coding: utf-8 -*-
class CantileverWallSafety(object):
    """
        Parameters
        ----------
        file_path : str
            File path of data in .csv format.
        input_col1 : int
            starting column of input data.
        input_col2 : int
            ending column of input data.
        output_col: int
            output column of data.
        degree : int
            degree of polynomial.
        saving_path : str
            the path to the file to save the model as .csv.
        -------
        
        """
    def __init__(self):
        pass

    def calculate_safety_factors (self, X1, X2, X3, X4, phi):
        fs = self.__calculate_sliding_safety_factor(X1, X2, X3, X4, phi)
        fo = self.__calculate_overturning_safety_factor(X1, X2, X3, X4, phi)
        fss = self.__calculate_slope_stability_safety_factor(X1, X2, X3, X4, phi)
        return {
                "Sliding":fs,
                "Overturning":fo,
                "Slope Stability":fss
                }
    def __calculate_sliding_safety_factor(self, X1, X2, X3, X4, phi):
        sliding = (
                (-0.002705877997833638) * 1
                + (-2.460387052104366923) * X1
                + (1.985971905253469227) * X2
                + (-30.860863281045180173) * X3
                + (10.965778175155929119) * X4
                + (-1.857400941004449191) * phi
                + (-0.013577488437780725) * X1 ** 2
                + (0.022712055270084932) * X1 * X2
                + (3.412123620610519215) * X1 * X3
                + (-1.116042684858694845) * X1 * X4
                + (0.227487361346641020) * X1 * phi
                + (-0.026143920644546872) * X2 ** 2
                + (-2.614016508055352794) * X2 * X3
                + (0.919453427227493458) * X2 * X4
                + (-0.184819895139848922) * X2 * phi
                + (23.264083685822296133) * X3 ** 2
                + (-10.408734819337819744) * X3 * X4
                + (2.264004308902833884) * X3 * phi
                + (49.277828879303960719) * X4 ** 2
                + (-0.935590991214770296) * X4 * phi
                + (0.072234199128800844) * phi ** 2
                + (0.005101639053821929) * X1 ** 3
                + (-0.018909591016545085) * X1 ** 2 * X2
                + (-0.014436076517446550) * X1 ** 2 * X3
                + (-0.049315157191607735) * X1 ** 2 * X4
                + (-0.000226402707862798) * X1 ** 2 * phi
                + (0.026772075945777307) * X1 * X2 ** 2
                + (0.009229102556803028) * X1 * X2 * X3
                + (0.140514357651674165) * X1 * X2 * X4
                + (0.001344004315781110) * X1 * X2 * phi
                + (-1.755218977365988975) * X1 * X3 ** 2
                + (2.145326778607097307) * X1 * X3 * X4
                + (-0.191049293851237673) * X1 * X3 * phi
                + (-27.823023325451725185) * X1 * X4 ** 2
                + (0.078666231703266032) * X1 * X4 * phi
                + (-0.006636102432048929) * X1 * phi ** 2
                + (-0.006546706719229967) * X2 ** 3
                + (0.004196339178227176) * X2 ** 2 * X3
                + (-0.244837630325434652) * X2 ** 2 * X4
                + (-0.001675090875766116) * X2 ** 2 * phi
                + (1.311194095878441379) * X2 * X3 ** 2
                + (-1.392190746816025504) * X2 * X3 * X4
                + (0.148059183695928076) * X2 * X3 * phi
                + (31.218854330369097738) * X2 * X4 ** 2
                + (-0.072502404487518934) * X2 * X4 * phi
                + (0.005431668491119979) * X2 * phi ** 2
                + (-10.707453438397489975) * X3 ** 3
                + (-6.078815290942281457) * X3 ** 2 * X4
                + (-0.928311469105961962) * X3 ** 2 * phi
                + (-69.074790469728057474) * X3 * X4 ** 2
                + (0.903874810838874110) * X3 * X4 * phi
                + (-0.057106706186643486) * X3 * phi ** 2
                + (16.772157709114374313) * X4 ** 3
                + (-0.629046428663753265) * X4 ** 2 * phi
                + (0.021008357963275159) * X4 * phi ** 2
                + (-0.001223421064777241) * phi ** 3
                + (-0.000311302628657195) * X1 ** 4
                + (0.000569929840324335) * X1 ** 3 * X2
                + (0.000507534702766210) * X1 ** 3 * X3
                + (0.001389697885632257) * X1 ** 3 * X4
                + (-0.000017305660026778) * X1 ** 3 * phi
                + (0.002432090037277401) * X1 ** 2 * X2 ** 2
                + (0.000437246848592698) * X1 ** 2 * X2 * X3
                + (-0.016986094499004234) * X1 ** 2 * X2 * X4
                + (0.000082976990842809) * X1 ** 2 * X2 * phi
                + (0.001759236755187965) * X1 ** 2 * X3 ** 2
                + (0.002558123742247981) * X1 ** 2 * X3 * X4
                + (0.000292100616261948) * X1 ** 2 * X3 * phi
                + (0.897110144917832808) * X1 ** 2 * X4 ** 2
                + (0.000286925753837597) * X1 ** 2 * X4 * phi
                + (0.000003470338631573) * X1 ** 2 * phi ** 2
                + (-0.009583133435775881) * X1 * X2 ** 3
                + (0.005464880106678449) * X1 * X2 ** 2 * X3
                + (0.076791260978155196) * X1 * X2 ** 2 * X4
                + (-0.000082472010816126) * X1 * X2 ** 2 * phi
                + (0.006192079125792560) * X1 * X2 * X3 ** 2
                + (-0.152820874215751190) * X1 * X2 * X3 * X4
                + (-0.001383502444847196) * X1 * X2 * X3 * phi
                + (-1.581438483153522645) * X1 * X2 * X4 ** 2
                + (-0.002934993562194843) * X1 * X2 * X4 * phi
                + (-0.000016735761469988) * X1 * X2 * phi ** 2
                + (0.388886361097121602) * X1 * X3 ** 3
                + (-0.285572725860916976) * X1 * X3 ** 2 * X4
                + (0.043039915709971899) * X1 * X3 ** 2 * phi
                + (5.375514387504702007) * X1 * X3 * X4 ** 2
                + (-0.067899941453968937) * X1 * X3 * X4 * phi
                + (0.002747321124298097) * X1 * X3 * phi ** 2
                + (263.357767242502745830) * X1 * X4 ** 3
                + (0.112452678349950264) * X1 * X4 ** 2 * phi
                + (-0.000704425916989493) * X1 * X4 * phi ** 2
                + (0.000073816746700928) * X1 * phi ** 3
                + (17.66152)
        )
        return sliding

    def __calculate_overturning_safety_factor(self, X1, X2, X3, X4, phi):
        overturning = (
            (-0.000778178344479750) * 1
            + (-0.809325680161480321) * X1
            + (0.284147598966700998) * X2
            + (0.602983974537667722) * X3
            + (0.896492463413852581) * X4
            + (-0.251033759860925410) * phi
            + (0.151113099102343357) * X1**2
            + (0.003851318411004757) * X1 * X2
            + (-0.307288538893864871) * X1 * X3
            + (-0.164241519402796854) * X1 * X4
            + (0.092379058933973898) * X1 * phi
            + (-0.138024156881198012) * X2**2
            + (0.207641378987043379) * X2 * X3
            + (-0.322323312284907293) * X2 * X4
            + (-0.032653662070889683) * X2 * phi
            + (0.136290100735758979) * X3**2
            + (2.347240874915006881) * X3 * X4
            + (-0.059754299371559787) * X3 * phi
            + (-5.778381998144781484) * X4**2
            + (-0.112594721775570492) * X4 * phi
            + (0.011430910249723109) * phi**2
            + (-0.000146160664124290) * X1**3
            + (-0.002695714703482143) * X1**2 * X2
            + (0.002356807333709832) * X1**2 * X3
            + (0.026028964018671722) * X1**2 * X4
            + (-0.003775841407821851) * X1**2 * phi
            + (0.005479127171032702) * X1 * X2**2
            + (-0.011633780501719945) * X1 * X2 * X3
            + (0.010702498184525847) * X1 * X2 * X4
            + (0.000193943895134579) * X1 * X2 * phi
            + (-0.055946746429612108) * X1 * X3**2
            + (-0.046930111636235380) * X1 * X3 * X4
            + (0.024059311422837314) * X1 * X3 * phi
            + (-5.898971417573407372) * X1 * X4**2
            + (0.010696846733999593) * X1 * X4 * phi
            + (-0.003401426429640697) * X1 * phi**2
            + (-0.001955978863859897) * X2**3
            + (0.023613557872502782) * X2**2 * X3
            + (-0.043294873669709542) * X2**2 * X4
            + (0.001987121340135900) * X2**2 * phi
            + (0.054062822662204413) * X2 * X3**2
            + (-0.058194225917431723) * X2 * X3 * X4
            + (-0.017226190443661013) * X2 * X3 * phi
            + (2.970914256966261657) * X2 * X4**2
            + (0.000137139366469155) * X2 * X4 * phi
            + (0.001322885648062933) * X2 * phi**2
            + (0.052937120944326253) * X3**3
            + (-2.364726071433905563) * X3**2 * X4
            + (-0.008710451493422991) * X3**2 * phi
            + (4.590157667148671017) * X3 * X4**2
            + (-0.058382937792937399) * X3 * X4 * phi
            + (0.001767274535795615) * X3 * phi**2
            + (5.659146767447583493) * X4**3
            + (0.778757017527346052) * X4**2 * phi
            + (0.003755087412125491) * X4 * phi**2
            + (-0.000216919609815625) * phi**3
            + (0.000004788682317070) * X1**4
            + (0.000048158535770115) * X1**3 * X2
            + (-0.000167559527141203) * X1**3 * X3
            + (0.001862092745185506) * X1**3 * X4
            + (0.000013687790634376) * X1**3 * phi
            + (0.001072465948237426) * X1**2 * X2**2
            + (0.000578607970787182) * X1**2 * X2 * X3
            + (-0.005115099519370718) * X1**2 * X2 * X4
            + (-0.000058580191884428) * X1**2 * X2 * phi
            + (0.009977399418201402) * X1**2 * X3**2
            + (-0.003672181488532164) * X1**2 * X3 * X4
            + (-0.002340985216064184) * X1**2 * X3 * phi
            + (-0.068701672512304732) * X1**2 * X4**2
            + (-0.001234753027255564) * X1**2 * X4 * phi
            + (0.000236715407566201) * X1**2 * phi**2
            + (1.96294)
        )
        return overturning

    def __calculate_slope_stability_safety_factor(self, X1, X2, X3, X4, phi):
        slope_stability = (
            -0.004451990260891091 * 1 +
            -0.203262923665963990 * X1 +
            0.296801670613494384 * X2 +
            -6.332740900737842793 * X3 +
            -1.336675062537132641 * X4 +
            -0.604972322465899937 * phi +
            0.043783623573443557 * (X1 ** 2) +
            0.063847088050165521 * (X1 * X2) +
            -0.039471344067503612 * (X1 * X3) +
            3.406041820235253148 * (X1 * X4) +
            0.013203614280985120 * (X1 * phi) +
            -0.056422187195693273 * (X2 ** 2) +
            -0.862959816789284351 * (X2 * X3) +
            1.006658500359210340 * (X2 * X4) +
            -0.020802632790809687 * (X2 * phi) +
            15.758947378254481109 * (X3 ** 2) +
            24.139340086830078036 * (X3 * X4) +
            0.077248560734092572 * (X3 * phi) +
            -338.443640338735065143 * (X4 ** 2) +
            -0.240585265699649858 * (X4 * phi) +
            0.031206427488817644 * (phi ** 2) +
            -0.018223522140744273 * (X1 ** 3) +
            -0.004435081303380765 * (X1 ** 2 * X2) +
            0.041930586093835390 * (X1 ** 2 * X3) +
            0.290144188107120338 * (X1 ** 2 * X4) +
            0.002713470915928906 * (X1 ** 2 * phi) +
            0.032614334945616802 * (X1 * X2 ** 2) +
            0.126277039520652418 * (X1 * X2 * X3) +
            -0.614630198978643016 * (X1 * X2 * X4) +
            -0.006726795902574060 * (X1 * X2 * phi) +
            0.018975939298116792 * (X1 * X3 ** 2) +
            -8.029281742064444671 * (X1 * X3 * X4) +
            -0.006590482279908814 * (X1 * X3 * phi) +
            -63.512451030524722739 * (X1 * X4 ** 2) +
            -0.053475509293141599 * (X1 * X4 * phi) +
            -0.000431046578896144 * (X1 * phi ** 2) +
            -0.037781904511620112 * (X2 ** 3) +
            -0.060465391515947653 * (X2 ** 2 * X3) +
            -0.064778009351209892 * (X2 ** 2 * X4) +
            0.004624903491979637 * (X2 ** 2 * phi) +
            0.249615306564511918 * (X2 * X3 ** 2) +
            4.467264354428065687 * (X2 * X3 * X4) +
            0.028137755785397789 * (X2 * X3 * phi) +
            -39.085744842698815660 * (X2 * X4 ** 2) +
            -0.035998789138118159 * (X2 * X4 * phi) +
            0.000538913653485906 * (X2 * phi ** 2) +
            -18.466038609361060452 * (X3 ** 3) +
            -7.597378324401006466 * (X3 ** 2 * X4) +
            0.031127662278242596 * (X3 ** 2 * phi) +
            118.854702209037910166 * (X3 * X4 ** 2) +
            -0.582224277375302690 * (X3 * X4 * phi) +
            -0.003105936041173152 * (X3 * phi ** 2) +
            40.921179412429154354 * (X4 ** 3) +
            25.703590693956073210 * (X4 ** 2 * phi) +
            -0.000963059408391587 * (X4 * phi ** 2) +
            -0.000655921081067490 * (phi ** 3) +
            5.51673
        )
        return slope_stability
